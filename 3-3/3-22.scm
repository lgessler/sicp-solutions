(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               '())
              (else
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)
               '()))))
    (define (delete!)
      (cond ((empty?)
             (error "DELETE! called with an empty queue."))
            (else 
             (set! front-ptr (cdr front-ptr))
             '())))
    (define (dispatch m)
      (cond ((eq? m 'empty?) empty?)
            ((eq? m 'insert!) insert!)
            ((eq? m 'delete!) delete!)
            ((eq? m 'front-ptr) front-ptr)
            (else (error "oops!"))))
    dispatch))
     
(define q (make-queue))
(q 'front-ptr)
((q 'insert!) 1)
(q 'front-ptr)
((q 'insert!) 2)
((q 'insert!) 3)
(q 'front-ptr)
((q 'delete!))
(q 'front-ptr)
((q 'delete!))
((q 'delete!))
(q 'front-ptr)
